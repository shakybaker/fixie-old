@model Fixie.Models.BoardViewModel

@{
    ViewBag.Title = "Board";
    Layout = "_BoardLayout.cshtml";
}

@section Styles {
    @Styles.Render("~/Content/board")
}

        <div id="panel" class="info-panel-on">
            <div id="banner">
                <a class="menu-trigger top-nav">MENU</a>
                <div class="right-top-nav" >
                    <a href="#" class="detail-trigger top-nav">SIMPLE VIEW</a>
                    <a href="#" class="menu-snap top-nav">ACTIVITY</a>
                </div>
                <h1>US Order History <span>Sprint 1</span></h1>

            </div>
        
            <div class="bs-docs-grid">
                <div class="row-fluid show-grid">
                    <div class="span12 card-viewport">
                        <div class="card-container" data-bind="foreach: columns">
                            <div data-bind="attr: {id: columnId}" class="lane">
                                <h2 class="lane-heading" data-bind="text: name"></h2>
                                <div class="card-counter"><span data-bind="attr: {class: cardCountClass}, text: cards().length + ' CARDS'"></span></div>
                                @*<ul class="cards sortable" data-bind="sortable: { data: cards, allowDrop: $root.isColumnFull }">*@
                                <div class="cards-viewport">
                                    <ul class="cards sortable" data-bind="sortable: { data: cards, allowDrop: true }">
                                    
                                        <li data-bind="attr: {id: cardId}" class="card">
                                            <div class="card-body">
                                                <div class="card-title"><strong class="card-id" data-bind="text: '#' + id"></strong><span data-bind="text: name"></span></div>
                                                <div class="card-description" data-bind="text: description"></div>
                                            </div>
                                            <div class="card-widgets">
                                                <div class="card-story-points" data-bind="text: complexity"></div>
                                                <div data-bind="attr: {class: cardClass}, text: priority"></div>
                                                <div class="card-bugs">
                                                    <img data-bind="attr: {src: (hasBugs === true) ? '/images/bug-on.png' : '/images/bug-off.png', title: (hasBugs === true) ? 'Bugs attached to this card' : 'No bugs'}" />
                                                </div>
                                                <div class="card-assignees">
                                                    <a href="#"><img src="/Images/user1.png" /></a>
    @*                                                <a href="#" style="margin: -27px 0 0 5px;"><img src="/Images/user2.png" /></a>*@
                                                </div>
                                            </div>
                                            <div class="clearboth"></div>
                                            <div class="actions"><button class="view-card" data-bind="click: openCard">VIEW</button><button class="edit-card">EDIT</button></div>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <nav id="menu" class="menu">
			<ul>
				<li><a href="#">Overview</a></li>
				<li><a href="#usage">Usage</a></li>
				<li><a href="#inner-workings">Inner-Workings</a></li>
				<li><a href="#animation">Animation</a></li>
				<li><a href="#options">Options</a></li>
				<li><a href="#api">API</a></li>
				<li><a href="#tips">Tips &amp; Examples</a></li>
				<li><a href="#license">License</a></li>
				<li><a href="#about">About</a></li>
			</ul>
		</nav>
<nav id="info-panel" class="menu" style="width: 20%; z-index: 1; display: block;">
    <div id="action-buttons">
    </div>
    <div id="message" data-bind="flash: lastAction"></div>
    <div id="error" data-bind="flash: lastError"></div>    
    <h2>Recent Activity</h2>
    <ul id="activity-log" class="messages"></ul>
</nav>




@section Scripts {
    <script src="~/Scripts/jquery.mCustomScrollbar.min.js"></script>
    <script src="~/Scripts/jquery.mousewheel.min.js"></script>
@Scripts.Render("~/bundles/board")

<script type="text/javascript">

    $(function () {

        board.init();

        //data
        var extraCards = [
            //new Card(16, "Parker", "Lorem ipsum dolor sit amet, consectetur adipiscing elit", 13, "HIGH"),
            //new Card(17, "Dennis", "Lorem ipsum dolor sit amet, consectetur adipiscing elit", 8, "HIGH"),
            //new Card(18, "Angel", "Lorem ipsum dolor sit amet, consectetur adipiscing elit", 5, "MED")
        ];

        var initialColumns = [];
        @foreach (var columnModel in Model.Board.Lanes)
        {
        <text>
            var cards@(columnModel.Id) = [];
            @foreach (var cardModel in columnModel.Cards)
            {
                <text>
                    var card@(cardModel.Id) = new Card(
                        parseInt("@(cardModel.Id)"),
                        "@(cardModel.Name)",
                        "@(cardModel.Description)",
                        parseInt("@(cardModel.Complexity.Name)"),
                        "@(cardModel.Priority.Name)",
                        ("@(cardModel.HasBugs().ToString().ToLower())" === "true")
                    );
                    cards@(columnModel.Id).push(card@(cardModel.Id));
                </text>
            }
            var column@(columnModel.Id) = new Column(
                parseInt("@(columnModel.Id)"),
                parseInt("@(columnModel.Sequence)"),
                "@(columnModel.Name)",
                cards@(columnModel.Id)
            );

            initialColumns.push(column@(columnModel.Id));
        </text>
        };

        //knockout
        var vm = new BoardViewModel(initialColumns, extraCards);
        //ko.bindingHandlers.sortable.beforeMove = vm.verifyAssignments;
        ko.bindingHandlers.sortable.afterMove = vm.updateLastAction;
        ko.bindingHandlers.flash = {
            init: function (element) {
                $(element).hide();
            },
            update: function (element, valueAccessor) {
                var value = ko.utils.unwrapObservable(valueAccessor());
                if (value) {
                    $(element).stop().hide().text(value).fadeIn(function () {
                        clearTimeout($(element).data("timeout"));
                        $(element).data("timeout", setTimeout(function () {
                            $(element).fadeOut();
                            valueAccessor()(null);
                        }, 3000));
                    });
                }
            },
            timeout: null
        };

        ko.applyBindings(vm);
        $('.card-container').width($('.lane').length * 304);
    });

</script>



        }
